from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from handlers.start import authorized_users
from states.notification_settings import NotificationSettings
from database.models import get_notifications_settings, toggle_notification_setting

router = Router()

# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def notifications_inline_menu(settings):
    buttons = [
        [types.InlineKeyboardButton(
            text=f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ {'‚úÖ' if settings['schedule_changes'] else '‚ùå'}",
            callback_data="toggle_schedule_changes"
        )],
        [types.InlineKeyboardButton(
            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞ {'‚úÖ' if settings['reminder_2h'] else '‚ùå'}",
            callback_data="toggle_reminder_2h"
        )],
        [types.InlineKeyboardButton(
            text=f"üìù –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–æ–º–∞—à–∫–∏ {'‚úÖ' if settings['homework_ready'] else '‚ùå'}",
            callback_data="toggle_homework_ready"
        )],
        [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def choose_student_inline_keyboard_notifications(students):
    buttons = [
        [types.InlineKeyboardButton(text=student[1], callback_data=f"select_notifications_student:{student[0]}")]
        for student in students
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def notifications_start(message: types.Message, state: FSMContext):
    user_data = authorized_users.get(message.from_user.id)
    if not user_data:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    students = user_data.get("students", [])
    await state.update_data(current_action="notifications")

    if len(students) == 1:
        await state.update_data(selected_student_id=students[0][0])
        settings = get_notifications_settings(message.from_user.id, students[0][0])
        await message.answer("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=notifications_inline_menu(settings))
    else:
        await message.answer(
            "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=choose_student_inline_keyboard_notifications(students)
        )
        await state.set_state(NotificationSettings.choosing_student_for_notifications)

# –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data.startswith("select_notifications_student:"))
async def choose_student_notifications(callback: types.CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":")[1])
    await state.update_data(selected_student_id=student_id)

    settings = get_notifications_settings(callback.from_user.id, student_id)
    await callback.message.edit_text("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=notifications_inline_menu(settings))
    await state.set_state(None)  # –¢–æ–ª—å–∫–æ –æ–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º
    await callback.answer()

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@router.callback_query(F.data.startswith("toggle_"))
async def toggle_notifications(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id")

    if not student_id:
        await callback.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.", show_alert=True)
        return

    field_map = {
        "toggle_schedule_changes": "schedule_changes",
        "toggle_reminder_2h": "reminder_2h",
        "toggle_homework_ready": "homework_ready"
    }

    field = field_map.get(callback.data)
    if not field:
        await callback.answer("‚ùó –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", show_alert=True)
        return

    toggle_notification_setting(callback.from_user.id, student_id, field)
    settings = get_notifications_settings(callback.from_user.id, student_id)

    await callback.message.edit_text("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", reply_markup=notifications_inline_menu(settings))
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()  # –ü—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –æ—á–∏—â–∞–µ–º –≤—Å—ë
    await callback.message.delete()
    await callback.message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
