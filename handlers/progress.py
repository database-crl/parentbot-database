from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from handlers.start import authorized_users
from states.student_selection import StudentSelection
from database.models import get_schedule_for_student
from datetime import datetime

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞
def progress_inline_menu():
    buttons = [
        [types.InlineKeyboardButton(text="‚úÖ –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã", callback_data="studied_topics")],
        [types.InlineKeyboardButton(text="üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="upcoming_topics")],
        [types.InlineKeyboardButton(text="‚û° –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞", callback_data="choose_another_student_progress")],
        [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
def choose_student_inline_keyboard(students):
    buttons = [[types.InlineKeyboardButton(text=student[1], callback_data=f"select_progress_student:{student[0]}")] for student in students]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞"
@router.message(F.text == "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞")
async def progress_start(message: types.Message, state: FSMContext):
    user_data = authorized_users.get(message.from_user.id)
    if not user_data:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    students = user_data.get("students", [])
    await state.update_data(current_action="progress")

    if len(students) == 1:
        await state.update_data(selected_student_id=students[0][0])
        await message.answer(f"üìö –í—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫: {students[0][1]}", reply_markup=progress_inline_menu())
    else:
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=choose_student_inline_keyboard(students))
        await state.set_state(StudentSelection.choosing_student_for_progress)

# –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@router.callback_query(F.data.startswith("select_progress_student:"))
async def choose_student_progress(callback: types.CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":")[1])

    await state.update_data(selected_student_id=student_id)

    user_data = authorized_users.get(callback.from_user.id)
    students = user_data.get("students", [])
    student_name = next((s[1] for s in students if s[0] == student_id), "–£—á–µ–Ω–∏–∫")

    await callback.message.edit_text(f"üìö –í—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫: {student_name}", reply_markup=progress_inline_menu())
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
@router.callback_query(F.data == "studied_topics")
async def show_studied_topics(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id")

    if not student_id:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        await callback.answer()
        return

    lessons = get_schedule_for_student(student_id)
    today = datetime.now().date()

    studied = [lesson for lesson in lessons if datetime.strptime(lesson[2], "%Y-%m-%d").date() < today]

    if not studied:
        await callback.message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º.")
        await callback.answer()
        return

    text = "‚úÖ –ò–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:\n\n"
    for lesson in studied:
        text += f"üìÖ {lesson[2]} ‚Äî {lesson[4]}\n"

    await callback.message.answer(text)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
@router.callback_query(F.data == "upcoming_topics")
async def show_upcoming_topics(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id")

    if not student_id:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        await callback.answer()
        return

    lessons = get_schedule_for_student(student_id)
    today = datetime.now().date()

    upcoming = [lesson for lesson in lessons if datetime.strptime(lesson[2], "%Y-%m-%d").date() >= today]

    if not upcoming:
        await callback.message.answer("‚ùó –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ–º.")
        await callback.answer()
        return

    text = "üîú –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª:\n\n"
    for lesson in upcoming:
        text += f"üìÖ {lesson[2]} ‚Äî {lesson[4]}\n"

    await callback.message.answer(text)
    await callback.answer()

# –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data == "choose_another_student_progress")
async def choose_another_student_progress(callback: types.CallbackQuery, state: FSMContext):
    user_data = authorized_users.get(callback.from_user.id)

    if not user_data:
        await callback.message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        await callback.answer()
        return

    students = user_data.get("students", [])

    await callback.message.edit_text(
        "üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:",
        reply_markup=choose_student_inline_keyboard(students)  # <-- –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    )

    await state.set_state(StudentSelection.choosing_student_for_progress)
    await callback.answer()


# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await callback.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
