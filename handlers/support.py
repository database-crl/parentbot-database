from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from handlers.start import authorized_users
from states.support_question import SupportQuestion
from utils.logger import log_info
from keyboards.support import support_inline_menu


router = Router()

ADMIN_CHAT_ID = 7288278555  # <-- —Å—é–¥–∞ —Å–≤–æ–π Telegram ID

# –•—Ä–∞–Ω–∏–º –≤—Å–µ —Ç–∏–∫–µ—Ç—ã —Ç—É—Ç: user_id -> {username, question}
tickets = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def support_inline_menu(is_admin=False):
    buttons = [
        [types.InlineKeyboardButton(text="üì© –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")]
    ]

    if is_admin:
        buttons.append([types.InlineKeyboardButton(text="üìÑ –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤", callback_data="list_tickets")])

    buttons.append([types.InlineKeyboardButton(text="‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="show_faq")])
    buttons.append([types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")])

    return types.InlineKeyboardMarkup(inline_keyboard=buttons)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
def choose_student_inline_keyboard_support(students):
    buttons = [
        [types.InlineKeyboardButton(text=student[1], callback_data=f"select_support_student:{student[0]}")]
        for student in students
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏–∞
@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_start(message: types.Message, state: FSMContext):
    user_data = authorized_users.get(message.from_user.id)
    if not user_data:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start.")
        return

    students = user_data.get("students", [])
    await state.update_data(current_action="support")

    if len(students) == 1:
        await state.update_data(selected_student_id=students[0][0])
        await message.answer("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=support_inline_menu())
    else:
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=choose_student_inline_keyboard_support(students))
        await state.set_state(SupportQuestion.choosing_student_for_support)

# –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@router.callback_query(F.data.startswith("select_support_student:"))
async def choose_student_support(callback: types.CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":")[1])

    await state.update_data(selected_student_id=student_id)
    await callback.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=support_inline_menu())
    await state.clear()
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
@router.callback_query(F.data == "contact_manager")
async def start_support_question(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º.")
    await state.set_state(SupportQuestion.writing_question)
    await callback.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(SupportQuestion.writing_question)
async def receive_support_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id", None)

    tickets[message.from_user.id] = {
        "username": message.from_user.username or f"id{message.from_user.id}",
        "question": message.text.strip()
    }

    text_to_admin = f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{tickets[message.from_user.id]['username']}\n\n"
    if student_id:
        text_to_admin += f"üë§ –£—á–µ–Ω–∏–∫ ID: {student_id}\n"
    text_to_admin += f"‚ùì –í–æ–ø—Ä–æ—Å:\n{tickets[message.from_user.id]['question']}"

    await message.bot.send_message(ADMIN_CHAT_ID, text_to_admin)
    log_info(f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {tickets[message.from_user.id]['question']}")

    await message.answer("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ç–æ–≤
@router.callback_query(F.data == "list_tickets")
async def show_ticket_list(callback: types.CallbackQuery, state: FSMContext):
    if not tickets:
        await callback.message.answer("‚ùó –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        await callback.answer()
        return

    keyboard = []
    for user_id, info in tickets.items():
        keyboard.append([
            types.InlineKeyboardButton(
                text=f"{info['username']}: {info['question'][:20]}...",
                callback_data=f"open_ticket:{user_id}"
            )
        ])

    await callback.message.answer("üìÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard))
    await callback.answer()

# –û—Ç–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("open_ticket:"))
async def open_ticket(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(current_ticket_user_id=user_id)
    await callback.message.answer(f"‚úâÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{tickets[user_id]['username']}.")
    await state.set_state(SupportQuestion.answering_ticket)
    await callback.answer()

# –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.message(SupportQuestion.answering_ticket)
async def send_answer_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("current_ticket_user_id")

    try:
        await message.bot.send_message(user_id, f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n–û—à–∏–±–∫–∞: {e}")

    await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
@router.callback_query(F.data == "show_faq")
async def show_faq(callback: types.CallbackQuery):
    text = """
‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:

1. –ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?
‚Äî –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

2. –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± —É—Ä–æ–∫–∞—Ö?
‚Äî –†–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

3. –ö–∞–∫ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ–±—ë–Ω–∫–∞?
‚Äî –†–∞–∑–¥–µ–ª "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–∞".

(–≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å)
"""
    await callback.message.answer(text)
    await callback.answer()

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await callback.message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
