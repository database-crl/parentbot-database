from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from database.models import get_parent_by_id, get_students_by_parent
from keyboards.menu import main_menu
from keyboards.support import support_inline_menu
from utils.logger import log_info
from config import ADMIN_CHAT_ID
import os
import subprocess
import csv
import subprocess
from datetime import datetime

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
authorized_users = {}


# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ logs.csv
def log_action(user_id: int, action: str, details: str = ""):
    log_path = "db/logs.csv"
    already_logged = False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–π –ª–æ–≥?
    if os.path.exists(log_path):
        with open(log_path, mode="r", encoding="utf-8") as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row["user_id"] == str(user_id) and row["action"] == action:
                    already_logged = True
                    break

    if already_logged:
        print(f"‚è© –õ–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}, action={action}")
        return

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è ID
    if os.path.exists(log_path):
        with open(log_path, mode="r", encoding="utf-8") as file:
            total_rows = sum(1 for _ in file) - 1  # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    else:
        total_rows = 0

    next_id = total_rows + 1
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    with open(log_path, mode="a", encoding="utf-8", newline='') as file:
        writer = csv.writer(file)
        if total_rows == 0:
            writer.writerow(["id", "user_id", "action", "timestamp", "details"])
        writer.writerow([next_id, user_id, action, timestamp, details])

    # Git push
    try:
        subprocess.run(["git", "add", log_path], check=True)
        subprocess.run(["git", "commit", "-m", f"auto: –ª–æ–≥ {action.lower()} ‚Äî {user_id}"], check=True)
        subprocess.run(["git", "push"], check=True)
        print("‚úÖ –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub")
    except subprocess.CalledProcessError as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub:", e)

# –ê–≤—Ç–æ–ø—É—à –ª–æ–≥–æ–≤ –≤ GitHub
def push_logs_to_github():
    try:
        subprocess.run(["git", "add", "db/logs.csv"], check=True)
        subprocess.run(["git", "commit", "-m", "auto: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤"], check=True)
        subprocess.run(["git", "push"], check=True)
        print("‚úÖ –õ–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ push –≤ GitHub:", e)


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_CHAT_ID:
        await message.answer("üëë –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=support_inline_menu(is_admin=True))
        await state.clear()
        return

    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à ID —Ä–æ–¥–∏—Ç–µ–ª—è –∏–∑ '–°–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞'.")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ä–æ–¥–∏—Ç–µ–ª—è
@router.message(lambda message: message.text.isdigit())
async def handle_parent_id(message: types.Message):
    if message.from_user.id == ADMIN_CHAT_ID:
        return  # –ê–¥–º–∏–Ω –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

    user_input = message.text.strip()

    # –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if authorized_users.get(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ë–î
    parent = get_parent_by_id(user_input)
    if not parent:
        await message.answer("‚ö†Ô∏è –í–∞—à ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.")
        log_info(f"User {message.from_user.id} –≤–≤—ë–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID: {user_input}")
        log_action(message.from_user.id, "–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ‚Äî ID –Ω–µ –Ω–∞–π–¥–µ–Ω", f"–í–≤–µ–¥—ë–Ω–Ω—ã–π ID: {user_input}")
        push_logs_to_github()
        return

    students = get_students_by_parent(user_input)
    authorized_users[message.from_user.id] = {
        "parent_id": user_input,
        "parent_name": parent[2],
        "students": students
    }

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if len(students) == 1:
        welcome_text = f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {parent[2]}!\n–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    else:
        welcome_text = f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {parent[2]}!\n–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:\n\n"
        for student in students:
            welcome_text += f"üë§ {student[1]}\n"
        welcome_text += "\n–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."

    await message.answer(welcome_text, reply_markup=main_menu())

    log_action(
        user_id=message.from_user.id,
        action="–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        details=f"–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: {parent[2]}"
    )
