from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from handlers.start import authorized_users
from states.student_selection import StudentSelection
from database.models import get_schedule_for_student
from datetime import datetime

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def schedule_inline_menu():
    buttons = [
        [types.InlineKeyboardButton(text="üîú –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è", callback_data="upcoming_lessons")],
        [types.InlineKeyboardButton(text="‚èÆ –ü—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏", callback_data="past_lessons")],
        [types.InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
def choose_student_inline_keyboard(students):
    buttons = [[types.InlineKeyboardButton(text=student[1], callback_data=f"select_student:{student[0]}")] for student in students]
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
@router.message(F.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
async def handle_schedule(message: types.Message, state: FSMContext):
    user_data = authorized_users.get(message.from_user.id)
    if not user_data:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return

    students = user_data.get("students", [])
    await state.update_data(current_action="schedule")

    if len(students) == 1:
        await state.update_data(selected_student_id=students[0][0])
        await message.answer(f"üìö –í—ã–±—Ä–∞–Ω —É—á–µ–Ω–∏–∫: {students[0][1]}", reply_markup=schedule_inline_menu())
    else:
        await message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:", reply_markup=choose_student_inline_keyboard(students))
        await state.set_state(StudentSelection.choosing_student_for_schedule)

# –í—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ Inline-–∫–Ω–æ–ø–∫—É
@router.callback_query(F.data.startswith("select_student:"))
async def select_student_callback(callback: types.CallbackQuery, state: FSMContext):
    student_id = int(callback.data.split(":")[1])

    await state.update_data(selected_student_id=student_id)  # üß† —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ–Ω–∏–∫–∞

    user_data = authorized_users.get(callback.from_user.id)
    students = user_data.get("students", [])
    student_name = next((s[1] for s in students if s[0] == student_id), "–£—á–µ–Ω–∏–∫")

    await callback.message.edit_text(f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏: {student_name}", reply_markup=schedule_inline_menu())
    await callback.answer()


# –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(F.data == "upcoming_lessons")
async def show_upcoming_lessons(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id")

    if not student_id:
        await callback.message.edit_text("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        await callback.answer()
        return

    lessons = get_schedule_for_student(student_id)
    now = datetime.now()

    upcoming = [
        lesson for lesson in lessons
        if lesson[3] and datetime.strptime(f"{lesson[2]} {lesson[3]}", "%Y-%m-%d %H:%M") >= now
    ]

    if not upcoming:
        await callback.message.edit_text("‚ùó –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.")
        await callback.answer()
        return

    text = "üîú –ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è:\n\n"
    for lesson in upcoming:
        lesson_dt = datetime.strptime(f"{lesson[2]} {lesson[3]}", "%Y-%m-%d %H:%M")
        lesson_date = lesson_dt.strftime("%d.%m.%Y %H:%M")
        text += f"üìÖ {lesson_date} ‚Äî {lesson[4]}\n"  # lesson[4] = topic

    await callback.message.edit_text(text)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏
@router.callback_query(F.data == "past_lessons")
async def show_past_lessons(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    student_id = data.get("selected_student_id")

    if not student_id:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞.")
        await callback.answer()
        return

    lessons = get_schedule_for_student(student_id)
    now = datetime.now()

    past = [
        lesson for lesson in lessons
        if lesson[3] and datetime.strptime(f"{lesson[2]} {lesson[3]}", "%Y-%m-%d %H:%M") < now
    ]


    if not past:
        await callback.message.answer("‚ùó –ù–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö —É—Ä–æ–∫–æ–≤.")
        await callback.answer()
        return

    text = "‚èÆ –ü—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏:\n\n"
    for lesson in past[-4:]:
        lesson_dt = datetime.strptime(f"{lesson[2]} {lesson[3]}", "%Y-%m-%d %H:%M")
        lesson_date = lesson_dt.strftime("%d.%m.%Y %H:%M")
        text += f"üìÖ {lesson_date} ‚Äî {lesson[4]}\n"  # <= lesson[4] –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å topic

    await callback.message.answer(text)
    await callback.answer()

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await callback.message.delete()  # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
